# -*- python -*-
# ex: set syntax=python:

# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory.

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

####### BUILDSLAVES

# The 'slaves' list defines the set of recognized buildslaves. Each element is
# a BuildSlave object, specifying a unique slave name and password.  The same
# slave name and password must be configured on the slave.
from buildbot.buildslave import BuildSlave
c['slaves'] = [BuildSlave("example-slave", "pass")]

# 'slavePortnum' defines the TCP port to listen on for connections from slaves.
# This must match the value configured into the buildslaves (with their
# --master option)
c['slavePortnum'] = 9989

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.  Here we point to the buildbot clone of pyflakes.

from buildbot.changes.svnpoller import SVNPoller
c['change_source'] = []
c['change_source'].append(SVNPoller(
        "http://llvm.org/svn/llvm-project/cfe/trunk",
        pollinterval=300))
c['change_source'].append(SVNPoller(
        "http://llvm.org/svn/llvm-project/llvm/trunk",
        pollinterval=300))
####### SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming changes.  In this
# case, just kick off a 'runtests' build

from buildbot.schedulers.basic import SingleBranchScheduler
from buildbot.schedulers.forcesched import ForceScheduler
from buildbot.changes import filter
c['schedulers'] = []
c['schedulers'].append(SingleBranchScheduler(
                            name="all",
                            change_filter=filter.ChangeFilter(branch=None),
                            treeStableTimer=None,
                            builderNames=["runtests"]))
c['schedulers'].append(ForceScheduler(
                            name="force",
                            builderNames=["runtests"]))

####### BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which slaves can execute them.  Note that any particular build will
# only take place on one slave.

from buildbot.process.factory import BuildFactory
from buildbot.steps.source.git import Git
from buildbot.steps.source.svn import SVN
from buildbot.steps.shell import ShellCommand
from buildbot.steps.slave import RemoveDirectory

factory = BuildFactory()
# check out the source
#factory.addStep(Git(repourl='git://github.com/buildbot/pyflakes.git', mode='incremental'))
factory.addStep(SVN(repourl="http://llvm.org/svn/llvm-project/llvm/trunk",
                    mode="incremental",
                    description="updating llvm",
                    descriptionDone="update llvm",
                    haltOnFailure=True,
                    workdir="llvm"))

factory.addStep(SVN(repourl="http://llvm.org/svn/llvm-project/cfe/trunk",
                    mode="incremental",
                    description="updating clang",
                    descriptionDone="update clang",
                    haltOnFailure=True,
                    workdir="clang"))

factory.addStep(Git(repourl='https://github.com/bgabor666/csibe.git',
                    branch='buildbot',
                    mode='full',
                    method='clobber',
                    description="updating csibe",
                    descriptionDone="update csibe",
                    haltOnFailure=True,
                    workdir='csibe'))

factory.addStep(Git(repourl='git@github.com:bgabor666/csibe-results.git',
                    branch='experimental',
                    mode='full',
                    method='clobber',
                    description="updating csibe-results",
                    descriptionDone="update csibe-results",
                    haltOnFailure=True,
                    workdir='csibe-results'))

# run the tests (note that this will require that 'trial' is installed)
#factory.addStep(ShellCommand(command=["trial", "pyflakes"]))
factory.addStep(ShellCommand(command=["cmake",
                                      "../llvm",
                                      "-DCMAKE_BUILD_TYPE=Release",
                                      "-DLLVM_EXTERNAL_CLANG_SOURCE_DIR=../clang"],
                             haltOnFailure=True,
                             description="cmake llvm"))

factory.addStep(ShellCommand(command=["make", "-j10"],
                             haltOnFailure=True,
                             description="make llvm"))

# Generate toolchain file for native -Os target
factory.addStep(ShellCommand(command=["python",
                                      "toolchain_generator.py",
                                      "--template-path",
                                      "../gen/toolchain-templates/clang-trunk-native-Os.cmake.template",
                                      "--toolchain-path",
                                      "../toolchain-files/clang-trunk-native-Os.cmake",
                                      "--cc-path",
                                      "../../build/bin/clang",
                                      "--cxx-path",
                                      "../../build/bin/clang++"],
                             description="generating native -Os toolchain",
                             descriptionDone="generate native -Os toolchain",
                             haltOnFailure=True,
                             workdir="csibe/bin"))

# Generate toolchain file for native -Oz target
factory.addStep(ShellCommand(command=["python",
                                      "toolchain_generator.py",
                                      "--template-path",
                                      "../gen/toolchain-templates/clang-trunk-native-Oz.cmake.template",
                                      "--toolchain-path",
                                      "../toolchain-files/clang-trunk-native-Oz.cmake",
                                      "--cc-path",
                                      "../../build/bin/clang",
                                      "--cxx-path",
                                      "../../build/bin/clang++"],
                             description="generating native -Oz toolchain",
                             descriptionDone="generate native -Oz toolchain",
                             haltOnFailure=True,
                             workdir="csibe/bin"))


# Generate toolchain file for cortex-m0 -Os target
factory.addStep(ShellCommand(command=["python",
                                      "toolchain_generator.py",
                                      "--template-path",
                                      "../gen/toolchain-templates/clang-trunk-cortex-m0-Os.cmake.template",
                                      "--toolchain-path",
                                      "../toolchain-files/clang-trunk-cortex-m0-Os.cmake",
                                      "--cc-path",
                                      "../../build/bin/clang",
                                      "--cxx-path",
                                      "../../build/bin/clang++"],
                             description="generating cortex-m0 -Os toolchain",
                             descriptionDone="generate cortex-m0 -Os toolchain",
                             haltOnFailure=True,
                             workdir="csibe/bin"))

# Generate toolchain file for cortex-m0 -Oz target
factory.addStep(ShellCommand(command=["python",
                                      "toolchain_generator.py",
                                      "--template-path",
                                      "../gen/toolchain-templates/clang-trunk-cortex-m0-Oz.cmake.template",
                                      "--toolchain-path",
                                      "../toolchain-files/clang-trunk-cortex-m0-Oz.cmake",
                                      "--cc-path",
                                      "../../build/bin/clang",
                                      "--cxx-path",
                                      "../../build/bin/clang++"],
                             description="generating cortex-m0 -Oz toolchain",
                             descriptionDone="generate cortex-m0 -Oz toolchain",
                             haltOnFailure=True,
                             workdir="csibe/bin"))

# Generate toolchain file for cortex-m4 -Os target
factory.addStep(ShellCommand(command=["python",
                                      "toolchain_generator.py",
                                      "--template-path",
                                      "../gen/toolchain-templates/clang-trunk-cortex-m4-Os.cmake.template",
                                      "--toolchain-path",
                                      "../toolchain-files/clang-trunk-cortex-m4-Os.cmake",
                                      "--cc-path",
                                      "../../build/bin/clang",
                                      "--cxx-path",
                                      "../../build/bin/clang++"],
                             description="generating cortex-m4 -Os toolchain",
                             descriptionDone="generate cortex-m4 -Os toolchain",
                             haltOnFailure=True,
                             workdir="csibe/bin"))

# Generate toolchain file for cortex-m4 -Oz target
factory.addStep(ShellCommand(command=["python",
                                      "toolchain_generator.py",
                                      "--template-path",
                                      "../gen/toolchain-templates/clang-trunk-cortex-m4-Oz.cmake.template",
                                      "--toolchain-path",
                                      "../toolchain-files/clang-trunk-cortex-m4-Oz.cmake",
                                      "--cc-path",
                                      "../../build/bin/clang",
                                      "--cxx-path",
                                      "../../build/bin/clang++"],
                             description="generating cortex-m4 -Oz toolchain",
                             descriptionDone="generate cortex-m4 -Oz toolchain",
                             haltOnFailure=True,
                             workdir="csibe/bin"))

# Clean previous csibe-build directory
factory.addStep(RemoveDirectory(dir="csibe-build"))

# Run csibe.py
factory.addStep(ShellCommand(command=["python",
                                      "../csibe/csibe.py",
                                      "clang-trunk-native-Os",
                                      "clang-trunk-native-Oz",
                                      "clang-trunk-cortex-m0-Os",
                                      "clang-trunk-cortex-m0-Oz",
                                      "clang-trunk-cortex-m4-Os",
                                      "clang-trunk-cortex-m4-Oz",
                                      "CSiBE-v2.1.1",
                                      "--build-dir",
                                      "."],
                             description="running csibe.py",
                             descriptionDone="run csibe.py",
                             haltOnFailure=True,
                             workdir="csibe-build"))

# Run csibe.py
factory.addStep(ShellCommand(command=["python",
                                      "bin/result_copier.py",
                                      "--result-origin-dir",
                                      "../csibe-build",
                                      "--csibe-results-path",
                                      "../csibe-results",
                                      "--llvm-svn-path",
                                      "../llvm"],
                             description="uploading results",
                             descriptionDone="upload results",
                             haltOnFailure=True,
                             workdir="csibe"))

from buildbot.config import BuilderConfig

c['builders'] = []
c['builders'].append(
    BuilderConfig(name="runtests",
      slavenames=["example-slave"],
      factory=factory))

####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

c['status'] = []

from buildbot.status import html
from buildbot.status.web import authz, auth

authz_cfg=authz.Authz(
    # change any of these to True to enable; see the manual for more
    # options
    auth=auth.BasicAuth([("pyflakes","pyflakes")]),
    gracefulShutdown = False,
    #forceBuild = 'auth', # use this to test your slave once it is set up
    forceBuild = True, # use this to test your slave once it is set up
    forceAllBuilds = False,
    pingBuilder = False,
    stopBuild = False,
    stopAllBuilds = False,
    cancelPendingBuild = False,
)
c['status'].append(html.WebStatus(http_port=8010, authz=authz_cfg))

####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot
# installation's html.WebStatus home page (linked to the
# 'titleURL') and is embedded in the title of the waterfall HTML page.

c['title'] = "Pyflakes"
c['titleURL'] = "https://launchpad.net/pyflakes"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.WebStatus page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c['buildbotURL'] = "http://localhost:8010/"

####### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.  You can leave
    # this at its default for all but the largest installations.
    'db_url' : "sqlite:///state.sqlite",
}
